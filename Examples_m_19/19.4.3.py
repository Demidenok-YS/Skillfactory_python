"""Задание 19.4.3
Напишите декоратор, который будет сохранять результаты выполнения декорируемой функции в словаре.
Словарь должен находиться в nonlocal области в следующем формате: по ключу располагается аргумент функции,
по значению результат работы функции, например, {n: f(n)}.

И при повторном вызове функции будет брать значение из словаря, а не вычислять заново.
То есть словарь можно считать промежуточной памятью на время работы программы,
где будут храниться ранее вычисленные значения.
Исходная функция, которую нужно задекорировать имеет следующий вид и
 выполняет простое умножение на число 123456789:

def f(n):
   return n * 123456789"""

def my_decorator(f):
    dict_fn = {}
    def wrapper(n):
        nonlocal dict_fn
        if n in dict_fn:
            print(f"Возвращение результата из кэша: f({n})  {dict_fn[n]}")
        else:
            dict_fn[n] = f(n)
            print(f"Добавление результата в кэш: f({n})  {dict_fn[n]}")
        print(f"Кэш {dict_fn}")
        return dict_fn[n]
    return wrapper
@my_decorator
def f(n):
   return n * 123456789

f(1)
f(3)
f(5)
f(10)
f(3)
f(1)


